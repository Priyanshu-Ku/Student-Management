from tkinter import*
from tkinter import ttk
from PIL import Image,ImageTk  # pip install pillow
import mysql.connector
from tkinter import messagebox
from tkinter import filedialog
import os

class Student:
    def __init__(self,root) -> None:
        self.root=root
        self.root.geometry("1530x790+0+0")
        self.root.title("STUDENT MANAGEMENT SYSTEM")
        
        #Variables
        self.var_dep=StringVar()
        self.var_course=StringVar()
        self.var_year=StringVar()
        self.var_semester=StringVar()
        self.var_std_id=StringVar()
        self.var_std_name=StringVar()
        self.var_div=StringVar()
        self.var_roll=StringVar()
        self.var_gender=StringVar()
        self.var_dob=StringVar()
        self.var_email=StringVar()
        self.var_phone=StringVar()                 ######code remaining need to come back and complete########
        self.var_address=StringVar()                ### uploading of images from storage and etc###
        self.var_teacher=StringVar()                 ## rest function completed ##





    def add_data(self):                 ### for some reason block is not getting excuted because of excution line not defined
        if(self.var_dep.get()=="" or self.var_email.get()=="" or self.va_std_id.get()==""):
            messagebox.showerror("Error","All Fields Are required")
        else:
            try:
                conn=mysql.connector.connect(host="localhost",username="root",password="starboy@1602",database="yolo")
                my_cursor=conn.cursor()     
                my_cursor=execute("insert into student values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(
                                                                                                            self.var_dep.get(),               
                                                                                                            self.var_course.get(),
                                                                                                            self.var_year.get(),
                                                                                                            self.var_semester.get(),
                                                                                                            self.var_std_id.get(),
                                                                                                            self.var_std_name.get(),
                                                                                                            self.var_div.get(),
                                                                                                            self.var_roll.get(),                                                                                                                                 
                                                                                                            self.var_gender.get(),
                                                                                                            self.var_dob.get(),
                                                                                                            self.var_email.get(),
                                                                                                            self.var_phone.get(),
                                                                                                            self.var_address.get(),
                                                                                                            self.var_teacher.get()
                                                                                                                                    ))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showerror("Error",f"Due To:{str(es)}",parent=self.root) 
            except Exception as es:
                messagebox.showerror("Error",f"Due To:{str(es)})",parent=self.root) ### my addition because try block
                                                                                     ### doesn't work without except block 
                                                                                     ### have to check this block
    
    ### Fetch function
    def fetch_data(self):
        conn=mysql.connector.connect(host="localhost",username="root",password="starboy@1602",database="yolo")
        my_cursor=conn.cursor()
        my_cursor.execute("select * from student")
        data=my_cursor.fetchall()
        if len(data)!=0:
            self.student_table.delete(*self.student_table.get_children())
            for i in data:
                self.student_table.insert("",END,values=i)
            conn.commit()
        conn.close()

    ### Get Cursor            
    def get_cursor(self):
        cursor_row=self.student_table.focus()
        content=self.student_table.item(cursor_row)
        data=content["values"]


        self.var_dep.set(data[0])
        self.var_course.set(data[1])
        self.var_year.set(data[2])
        self.var_semester.set(data[3])
        self.var_std_id.set(data[4])
        self.var_std_name.set(data[5])
        self.var_div.set(data[6])
        self.var_roll.set(data[7])
        self.var_gender.set(data[8])
        self.var_dob.set(data[9])
        self.var_email.set(data[10])
        self.var_phone.set(data[11])
        self.var_address.set(data[12])
        self.var_teacher.set(data[13])

    def update_data(self):
        if (self.var_dep.get()=="" or self.var_email.get()=="" or self.va_std_id.get()==""):
            messagebox.showerror("Error","All Fields Are required")
        else:
            try:
                update=messagebox.askyesno("Update","Are you sure update this student data",parent=self.root)
                if update>0:
                    conn=mysql.connector.connect(host="localhost",username="root",password="starboy@1602",database="yolo")
                    my_cursor=conn.cursor()     
                    my_cursor.execute("update student set Dep=%s,course=%s,Year=%s,Semester=%s,Name=%s,Division=%s,Roll=%s,Gender=%s,Dob=%s,Email=%s,Phone=%s,Address=%s,Teacher=%s where student_id=%s",(
                                                                                                                                                            self.var_dep.get(),               
                                                                                                                                                            self.var_course.get(),
                                                                                                                                                            self.var_year.get(),
                                                                                                                                                            self.var_semester.get(),
                                                                                                                                                            self.var_std_id.get(),
                                                                                                                                                            self.var_std_name.get(),
                                                                                                                                                            self.var_div.get(),
                                                                                                                                                            self.var_roll.get(),                                                                                                                                 
                                                                                                                                                            self.var_gender.get(),
                                                                                                                                                            self.var_dob.get(),
                                                                                                                                                            self.var_email.get(),
                                                                                                                                                            self.var_phone.get(),
                                                                                                                                                            self.var_address.get(),
                                                                                                                                                            self.var_teacher.get(),
                                                                                                                                                            self.var_std_id.get(),        ))
                else:
                    if not update:
                        return
                conn.commit()
                self.fetch_data() 
                conn.close()

                messagebox.showinfo("Success","Student successfully updated",parent=self.root)
            except Exception as es:
                messagebox.showerror("Error",f"Due To:{str(es)})",parent=self.root)

                    
    def delete_data(self):
        if self.var_std_id.get()=="":
            messagebox.showerror("Error","All Fields Are required",parent=self.root)
        else:
            try:
                Delete=messagebox.askyesno("Delete","Are sure delete this student",parent=self.root)
                if Delete>0:
                    conn=mysql.connector.connect(host="localhost",username="root",password="starboy@1602",database="yolo")
                    my_cursur=conn.cursor()
                    sql="delete from student where student_id=%s"
                    value=(self.var_std_id.get(),)
                    my_cursur.execute(sql,value)
                else:
                    if not Delete:
                        return
                conn.commit() 
                self.fetch_data()
                conn.close()
            except Exception as es:
                messagebox.showerror("Error",f"Due To:{str(es)})",parent=self.root)  ### my addition because try block
                                                                                     ### doesn't work without except block 
                                                                                     ### have to check this block
    

    #reset
    def reset_data(self):
        self.var_dep.set("Select Department")
        self.var_course.set("Select Course")
        self.var_year.set("Select Year")
        self.var_semester.set("Select Semester")
        self.var_std_id.set("")
        self.var_std_name.set("")
        self.var_div.set("Select Division")
        self.var_roll.set("")
        self.var_gender.set("")
        self.var_dob.set("")
        self.var_email.set("")
        self.var_phone.set("")
        self.var_address.set("")
        self.var_teacher.set("")
        
    # search data
    def search_data(self):
        if self.var_com_search.get()=="" or self.var_search.get()=="":
            messagebox.showerror("Error","Please select option")
        else:
            try:
                conn=mysql.connector.connect(host="localhost",username="root",password="starboy@1602",database="yolo")
                my_cursur=conn.cursor()
                my_cursur.execute("select * from student where"+str(self.var_com_search.get())+"LIKE '%"+str(self.var_search.get())+"%'")
                rows=my_cursur.fetchall()

                if len(rows)!=0:
                    self.student_table.delete(*self.student_table.get_children())
                    for i in rows:
                        self.student_table.insert("",END,values=i)

                    conn.commit()
                conn.close()    
            except Exception as es:
                messagebox.showerror("Error",f"Due To:{str(es)}",parent=self.root)

    #  open image
    def open_img(self):
        fln=filedialog.askopenfilename(initialdir=os.getcwd(),title="open images",filetypes=(("JPG File","*.jpg"),("PNG File","*.png"),("All fILES","*.*")))
        img=Image.open(fln)
        img_browse=img.resize((540,160),Image.ANTIALIAS)
        self.photoimg_browse=ImageTk.PhotoImage(img_browse)
        self.btn_1.config(image=self.photoimg_browse)

    # open image
    def open_img_2(self):
        fln=filedialog.askopenfilename(initialdir=os.getcwd(),title="open images",filetypes=(("JPG File","*.jpg"),("PNG File","*.png"),("All fILES","*.*")))
        img_1=Image.open(fln)
        img_browse_1=img_1.resize((540,160),Image.ANTIALIAS)
        self.photoimg_browse=ImageTk.PhotoImage(img_browse_1)
        self.btn_1.config(image=self.photoimg_browse_1)

    # opne image
    def open_img_3(self):
        fln=filedialog.askopenfilename(initialdir=os.getcwd(),title="open images",filetypes=(("JPG File","*.jpg"),("PNG File","*.png"),("All fILES","*.*")))
        img=Image.open(fln)
        img_browse=img.resize((540,160),Image.ANTIALIAS)
        self.photoimg_browse=ImageTk.PhotoImage(img_browse)
        self.btn_1.config(image=self.photoimg_browse)
    
